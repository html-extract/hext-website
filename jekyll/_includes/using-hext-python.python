<div class='ace-clouds'><div class='ace_static_highlight' style='counter-reset:ace_line 0'><div class='ace_line'><span class='ace_keyword'>import</span> <span class='ace_identifier'>hext</span>
</div><div class='ace_line'>
</div><div class='ace_line'><span class='ace_comment'># hext.Html&#39;s constructor expects a single argument</span>
</div><div class='ace_line'><span class='ace_comment'># containing an UTF-8 encoded string of HTML.</span>
</div><div class='ace_line'><span class='ace_identifier'>html</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>hext</span><span class='ace_punctuation'>.</span><span class='ace_function ace_support'>Html</span><span class='ace_paren ace_lparen'>(</span><span class='ace_string'>&#34;&#34;&#34;</span>
</div><div class='ace_line'><span class='ace_string'>    &#60;a href=&#34;one.html&#34;>  &#60;img src=&#34;one.jpg&#34; />  &#60;/a></span>
</div><div class='ace_line'><span class='ace_string'>    &#60;a href=&#34;two.html&#34;>  &#60;img src=&#34;two.jpg&#34; />  &#60;/a></span>
</div><div class='ace_line'><span class='ace_string'>    &#60;a href=&#34;three.html&#34;>&#60;img src=&#34;three.jpg&#34; />&#60;/a>&#34;&#34;&#34;</span><span class='ace_paren ace_rparen'>)</span>
</div><div class='ace_line'>
</div><div class='ace_line'><span class='ace_comment'># hext.Rule&#39;s constructor expects a single argument</span>
</div><div class='ace_line'><span class='ace_comment'># containing a Hext snippet.</span>
</div><div class='ace_line'><span class='ace_comment'># Throws an exception of type ValueError on invalid syntax.</span>
</div><div class='ace_line'><span class='ace_identifier'>rule</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>hext</span><span class='ace_punctuation'>.</span><span class='ace_function ace_support'>Rule</span><span class='ace_paren ace_lparen'>(</span><span class='ace_string'>&#34;&#60;a href:link>  &#60;img src:image />  &#60;/a>&#34;</span><span class='ace_paren ace_rparen'>)</span>
</div><div class='ace_line'>
</div><div class='ace_line'><span class='ace_comment'># hext.Rule.extract expects an argument of type hext.Html.</span>
</div><div class='ace_line'><span class='ace_comment'># Returns a list of dictionaries.</span>
</div><div class='ace_line'><span class='ace_identifier'>results</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>rule</span><span class='ace_punctuation'>.</span><span class='ace_function ace_support'>extract</span><span class='ace_paren ace_lparen'>(</span><span class='ace_identifier'>html</span><span class='ace_paren ace_rparen'>)</span>
</div><div class='ace_line'>
</div><div class='ace_line'><span class='ace_comment'># hext.Rule.extract has a second, optional parameter</span>
</div><div class='ace_line'><span class='ace_comment'># of type unsigned int, called max_searches.</span>
</div><div class='ace_line'><span class='ace_comment'># The search for matching elements is aborted by</span>
</div><div class='ace_line'><span class='ace_comment'># throwing an exception after this limit is reached.</span>
</div><div class='ace_line'><span class='ace_comment'># The default is 0, which never aborts. If running</span>
</div><div class='ace_line'><span class='ace_comment'># untrusted hext templates, it is recommend to set</span>
</div><div class='ace_line'><span class='ace_comment'># max_searches to some high value, like 10000, to</span>
</div><div class='ace_line'><span class='ace_comment'># protect against resource exhaustion.</span>
</div><div class='ace_line'><span class='ace_comment'># results = rule.extract(html, 10000);</span>
</div><div class='ace_line'>
</div><div class='ace_line'><span class='ace_comment'># print each key-value pair</span>
</div><div class='ace_line'><span class='ace_keyword'>for</span> <span class='ace_identifier'>group</span> <span class='ace_keyword'>in</span> <span class='ace_identifier'>results</span><span class='ace_punctuation'>:</span>
</div><div class='ace_line'>    <span class='ace_keyword'>for</span> <span class='ace_identifier'>key</span> <span class='ace_keyword'>in</span> <span class='ace_identifier'>group</span><span class='ace_punctuation'>:</span>
</div><div class='ace_line'><span class='ace_indent-guide'>    </span>    <span class='ace_keyword'>print</span> <span class='ace_string'>&#39;{}: {}&#39;</span><span class='ace_punctuation'>.</span><span class='ace_function ace_support'>format</span><span class='ace_paren ace_lparen'>(</span><span class='ace_identifier'>key</span><span class='ace_punctuation'>,</span> <span class='ace_identifier'>group</span><span class='ace_paren ace_lparen'>[</span><span class='ace_identifier'>key</span><span class='ace_paren ace_rparen'>])</span>
</div><div class='ace_line'>    <span class='ace_keyword'>print</span>
</div></div></div>